{"expireTime":9007200828511105000,"key":"gatsby-plugin-mdx-entire-payload-63b2051ce2052f3d2a36960a7db4788c-","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"This post shows how to use Rust functions in a React Native project through WebAssembly. I struggled quite a bit to find an easy way to make it work, so I thought I'd share my findings. You can find the code for this post ","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":223,"offset":223},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/wborgeaud/rust-wasm-react-native","children":[{"type":"text","value":"here","position":{"start":{"line":2,"column":224,"offset":224},"end":{"line":2,"column":228,"offset":228},"indent":[]}}],"position":{"start":{"line":2,"column":223,"offset":223},"end":{"line":2,"column":282,"offset":282},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":2,"column":282,"offset":282},"end":{"line":2,"column":283,"offset":283},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":283,"offset":283},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Here's the TLDR:","position":{"start":{"line":4,"column":1,"offset":285},"end":{"line":4,"column":17,"offset":301},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":285},"end":{"line":4,"column":17,"offset":301},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Create a ","position":{"start":{"line":6,"column":4,"offset":306},"end":{"line":6,"column":13,"offset":315},"indent":[]}},{"type":"inlineCode","value":"wasm-pack","position":{"start":{"line":6,"column":13,"offset":315},"end":{"line":6,"column":24,"offset":326},"indent":[]}},{"type":"text","value":" project exposing the Rust functions you want to export. ","position":{"start":{"line":6,"column":24,"offset":326},"end":{"line":6,"column":81,"offset":383},"indent":[]}}],"position":{"start":{"line":6,"column":4,"offset":306},"end":{"line":6,"column":81,"offset":383},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":303},"end":{"line":6,"column":81,"offset":383},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Serve a web page exposing these functions through ","position":{"start":{"line":7,"column":4,"offset":387},"end":{"line":7,"column":54,"offset":437},"indent":[]}},{"type":"inlineCode","value":"message","position":{"start":{"line":7,"column":54,"offset":437},"end":{"line":7,"column":63,"offset":446},"indent":[]}},{"type":"text","value":" events.","position":{"start":{"line":7,"column":63,"offset":446},"end":{"line":7,"column":71,"offset":454},"indent":[]}}],"position":{"start":{"line":7,"column":4,"offset":387},"end":{"line":7,"column":71,"offset":454},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":384},"end":{"line":7,"column":71,"offset":454},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Use a React Native ","position":{"start":{"line":8,"column":4,"offset":458},"end":{"line":8,"column":23,"offset":477},"indent":[]}},{"type":"inlineCode","value":"WebView","position":{"start":{"line":8,"column":23,"offset":477},"end":{"line":8,"column":32,"offset":486},"indent":[]}},{"type":"text","value":" of this web page.","position":{"start":{"line":8,"column":32,"offset":486},"end":{"line":8,"column":50,"offset":504},"indent":[]}}],"position":{"start":{"line":8,"column":4,"offset":458},"end":{"line":8,"column":50,"offset":504},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":455},"end":{"line":8,"column":50,"offset":504},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Call Rust functions by sending messages to the ","position":{"start":{"line":9,"column":4,"offset":508},"end":{"line":9,"column":51,"offset":555},"indent":[]}},{"type":"inlineCode","value":"WebView","position":{"start":{"line":9,"column":51,"offset":555},"end":{"line":9,"column":60,"offset":564},"indent":[]}},{"type":"text","value":". ","position":{"start":{"line":9,"column":60,"offset":564},"end":{"line":9,"column":62,"offset":566},"indent":[]}}],"position":{"start":{"line":9,"column":4,"offset":508},"end":{"line":9,"column":62,"offset":566},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":505},"end":{"line":9,"column":62,"offset":566},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":303},"end":{"line":9,"column":62,"offset":566},"indent":[1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Pros and Cons","position":{"start":{"line":11,"column":4,"offset":571},"end":{"line":11,"column":17,"offset":584},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":568},"end":{"line":11,"column":17,"offset":584},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Pros","position":{"start":{"line":13,"column":5,"offset":590},"end":{"line":13,"column":9,"offset":594},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":586},"end":{"line":13,"column":9,"offset":594},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"One alternative is to use native modules but it is a pain to setup with Rust and React Native, and requires lots of different configurations for Android and iOS.","position":{"start":{"line":15,"column":3,"offset":598},"end":{"line":15,"column":164,"offset":759},"indent":[]}}],"position":{"start":{"line":15,"column":3,"offset":598},"end":{"line":15,"column":164,"offset":759},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":596},"end":{"line":15,"column":164,"offset":759},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Another alternative is to serve ","position":{"start":{"line":16,"column":3,"offset":762},"end":{"line":16,"column":35,"offset":794},"indent":[]}},{"type":"inlineCode","value":"wasm","position":{"start":{"line":16,"column":35,"offset":794},"end":{"line":16,"column":41,"offset":800},"indent":[]}},{"type":"text","value":"  files locally on the app and use them in a ","position":{"start":{"line":16,"column":41,"offset":800},"end":{"line":16,"column":86,"offset":845},"indent":[]}},{"type":"inlineCode","value":"WebView","position":{"start":{"line":16,"column":86,"offset":845},"end":{"line":16,"column":95,"offset":854},"indent":[]}},{"type":"text","value":".  This is also a pain to setup since local files need to be put in different places in Android and iOS, and you will get a bunch of permission errors along the way.","position":{"start":{"line":16,"column":95,"offset":854},"end":{"line":16,"column":260,"offset":1019},"indent":[]}}],"position":{"start":{"line":16,"column":3,"offset":762},"end":{"line":16,"column":260,"offset":1019},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":760},"end":{"line":16,"column":260,"offset":1019},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The solution shown here is very easy to setup, works out of the box, and allows for a clear separation between the Rust and React Native development.","position":{"start":{"line":17,"column":3,"offset":1022},"end":{"line":17,"column":152,"offset":1171},"indent":[]}}],"position":{"start":{"line":17,"column":3,"offset":1022},"end":{"line":17,"column":152,"offset":1171},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":1020},"end":{"line":17,"column":152,"offset":1171},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":596},"end":{"line":17,"column":152,"offset":1171},"indent":[1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Cons","position":{"start":{"line":19,"column":5,"offset":1177},"end":{"line":19,"column":9,"offset":1181},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":1173},"end":{"line":19,"column":9,"offset":1181},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The device needs an Internet connection to download the web page.","position":{"start":{"line":21,"column":3,"offset":1185},"end":{"line":21,"column":68,"offset":1250},"indent":[]}}],"position":{"start":{"line":21,"column":3,"offset":1185},"end":{"line":21,"column":68,"offset":1250},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":1183},"end":{"line":21,"column":68,"offset":1250},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Mild privacy issue since one can track requests to the web server. But all computations using WebAssembly are done locally on the device. In particular, the parameters to the Rust functions will not be sent to the server.","position":{"start":{"line":22,"column":3,"offset":1253},"end":{"line":22,"column":224,"offset":1474},"indent":[]}}],"position":{"start":{"line":22,"column":3,"offset":1253},"end":{"line":22,"column":224,"offset":1474},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":1251},"end":{"line":22,"column":224,"offset":1474},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Probably quite slower than using the native modules.","position":{"start":{"line":23,"column":3,"offset":1477},"end":{"line":23,"column":55,"offset":1529},"indent":[]}}],"position":{"start":{"line":23,"column":3,"offset":1477},"end":{"line":23,"column":55,"offset":1529},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":1475},"end":{"line":23,"column":55,"offset":1529},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":1183},"end":{"line":23,"column":55,"offset":1529},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Prototype","position":{"start":{"line":25,"column":4,"offset":1534},"end":{"line":25,"column":13,"offset":1543},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":1531},"end":{"line":25,"column":13,"offset":1543},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This gives an example of this structure with a simple Rust function that adds two numbers.","position":{"start":{"line":27,"column":1,"offset":1545},"end":{"line":27,"column":91,"offset":1635},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":1545},"end":{"line":27,"column":91,"offset":1635},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Rust","position":{"start":{"line":29,"column":5,"offset":1641},"end":{"line":29,"column":9,"offset":1645},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":1637},"end":{"line":29,"column":9,"offset":1645},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Create a ","position":{"start":{"line":31,"column":1,"offset":1647},"end":{"line":31,"column":10,"offset":1656},"indent":[]}},{"type":"inlineCode","value":"wasm-pack","position":{"start":{"line":31,"column":10,"offset":1656},"end":{"line":31,"column":21,"offset":1667},"indent":[]}},{"type":"text","value":" project following the instructions given ","position":{"start":{"line":31,"column":21,"offset":1667},"end":{"line":31,"column":63,"offset":1709},"indent":[]}},{"type":"link","title":null,"url":"https://rustwasm.github.io/docs/book/game-of-life/hello-world.html","children":[{"type":"text","value":"here","position":{"start":{"line":31,"column":64,"offset":1710},"end":{"line":31,"column":68,"offset":1714},"indent":[]}}],"position":{"start":{"line":31,"column":63,"offset":1709},"end":{"line":31,"column":137,"offset":1783},"indent":[]}},{"type":"text","value":". The ","position":{"start":{"line":31,"column":137,"offset":1783},"end":{"line":31,"column":143,"offset":1789},"indent":[]}},{"type":"inlineCode","value":"src/lib.rs","position":{"start":{"line":31,"column":143,"offset":1789},"end":{"line":31,"column":155,"offset":1801},"indent":[]}},{"type":"text","value":" exposes the functions you want to export. Here's ours:","position":{"start":{"line":31,"column":155,"offset":1801},"end":{"line":31,"column":210,"offset":1856},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":1647},"end":{"line":31,"column":210,"offset":1856},"indent":[]}},{"type":"code","lang":"rust","meta":null,"value":"use wasm_bindgen::prelude::*;\n\n#[wasm_bindgen]\npub fn add(a: u32, b: u32) -> u32 {\n\ta + b\n}","position":{"start":{"line":33,"column":1,"offset":1858},"end":{"line":40,"column":4,"offset":1961},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Then, build the package with ","position":{"start":{"line":42,"column":1,"offset":1963},"end":{"line":42,"column":30,"offset":1992},"indent":[]}},{"type":"inlineCode","value":"wasm-pack build","position":{"start":{"line":42,"column":30,"offset":1992},"end":{"line":42,"column":47,"offset":2009},"indent":[]}},{"type":"text","value":" and create a web directory with ","position":{"start":{"line":42,"column":47,"offset":2009},"end":{"line":42,"column":80,"offset":2042},"indent":[]}},{"type":"inlineCode","value":"package.json","position":{"start":{"line":42,"column":80,"offset":2042},"end":{"line":42,"column":94,"offset":2056},"indent":[]}},{"type":"text","value":" like:","position":{"start":{"line":42,"column":94,"offset":2056},"end":{"line":42,"column":100,"offset":2062},"indent":[]}}],"position":{"start":{"line":42,"column":1,"offset":1963},"end":{"line":42,"column":100,"offset":2062},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"/* -------- SNIP -------- */\n\"devDependencies\": {\n    \"rust\": \"file:../pkg\",\n    \"webpack\": \"^4.29.3\",\n    \"webpack-cli\": \"^3.1.0\",\n    \"webpack-dev-server\": \"^3.1.5\",\n    \"copy-webpack-plugin\": \"^5.0.0\"\n  }\n/* -------- SNIP -------- */","position":{"start":{"line":44,"column":1,"offset":2064},"end":{"line":54,"column":4,"offset":2318},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The WebAssembly functions can be called from Javascript using ","position":{"start":{"line":56,"column":1,"offset":2320},"end":{"line":56,"column":63,"offset":2382},"indent":[]}},{"type":"inlineCode","value":"message","position":{"start":{"line":56,"column":63,"offset":2382},"end":{"line":56,"column":72,"offset":2391},"indent":[]}},{"type":"text","value":" events. Here's our ","position":{"start":{"line":56,"column":72,"offset":2391},"end":{"line":56,"column":92,"offset":2411},"indent":[]}},{"type":"inlineCode","value":"index.js","position":{"start":{"line":56,"column":92,"offset":2411},"end":{"line":56,"column":102,"offset":2421},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":56,"column":102,"offset":2421},"end":{"line":56,"column":103,"offset":2422},"indent":[]}}],"position":{"start":{"line":56,"column":1,"offset":2320},"end":{"line":56,"column":103,"offset":2422},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"import * as wasm from \"rust\"; // Import the wasm package\n\nlet sum;\ndocument.addEventListener(\"message\", function(event) { // Receive parameters in a message\n    let {a: s1, b: s2} = JSON.parse(event.data); // Parse the parameters\n    sum = wasm.add(s1, s2); // Call the wasm function\n    window.ReactNativeWebView.postMessage(JSON.stringify({sum})); // Send a message to React Native with the result of the wasm function.\n}, false);","position":{"start":{"line":58,"column":1,"offset":2424},"end":{"line":67,"column":4,"offset":2874},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Now, serve this web directory on a web server. For this prototype, we serve it on ","position":{"start":{"line":69,"column":1,"offset":2876},"end":{"line":69,"column":83,"offset":2958},"indent":[]}},{"type":"inlineCode","value":"localhost:8080","position":{"start":{"line":69,"column":83,"offset":2958},"end":{"line":69,"column":99,"offset":2974},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":69,"column":99,"offset":2974},"end":{"line":69,"column":100,"offset":2975},"indent":[]}}],"position":{"start":{"line":69,"column":1,"offset":2876},"end":{"line":69,"column":100,"offset":2975},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"React Native","position":{"start":{"line":71,"column":5,"offset":2981},"end":{"line":71,"column":17,"offset":2993},"indent":[]}}],"position":{"start":{"line":71,"column":1,"offset":2977},"end":{"line":71,"column":17,"offset":2993},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Create a React Native project with ","position":{"start":{"line":73,"column":1,"offset":2995},"end":{"line":73,"column":36,"offset":3030},"indent":[]}},{"type":"inlineCode","value":"react-native-webview","position":{"start":{"line":73,"column":36,"offset":3030},"end":{"line":73,"column":58,"offset":3052},"indent":[]}},{"type":"text","value":" linked. Here is our ","position":{"start":{"line":73,"column":58,"offset":3052},"end":{"line":73,"column":79,"offset":3073},"indent":[]}},{"type":"inlineCode","value":"App.js","position":{"start":{"line":73,"column":79,"offset":3073},"end":{"line":73,"column":87,"offset":3081},"indent":[]}},{"type":"text","value":" that shows the basic way to call the WebAssembly functions served by our web server:","position":{"start":{"line":73,"column":87,"offset":3081},"end":{"line":73,"column":172,"offset":3166},"indent":[]}}],"position":{"start":{"line":73,"column":1,"offset":2995},"end":{"line":73,"column":172,"offset":3166},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"import React, { Component } from 'react';\nimport { View, Button, TextInput, Text } from 'react-native';\nimport { WebView } from 'react-native-webview';\n\n\n\nexport default class App extends Component {\n\n    webView = null; // Holds the reference to the WebView\n    state = { s1: null, s2: null, sum: null };\n\t\n\t// Sends a message to the WebView with the parameters of the Rust function `add`.\n    sendMessage = () => {\n        this.webView.postMessage(JSON.stringify({ a: parseInt(this.state.s1), b: parseInt(this.state.s2) }));\n    }\n\t\n    // Listen for messages from the WebView containing the result of the wasm function.\n    onMessage = (event) => {\n        this.setState({sum: JSON.parse(event.nativeEvent.data).sum}, () => console.log(this.state));\n    }\n    \n    render() {\n        return (\n            <View style={{ flex: 1 }}>\n                <Button\n                    title=\"Press me\"\n                    onPress={this.sendMessage} // Sends a message on button press.\n                />\n                <TextInput\n                    placeholder=\"First summand\"\n                    onChangeText={(text) => this.setState({ s1: text })}\n                    value={this.state.s1}\n                />\n                <TextInput\n                    placeholder=\"Second summand\"\n                    onChangeText={(text) => this.setState({ s2: text })}\n                    value={this.state.s2}\n                />\n                <WebView\n                    style={{ height: 0 }}\n                    useWebkit={true}\n                    originWhitelist={['*']}\n                    javaScriptEnabled={true}\n                    source={{ uri: 'http://10.0.2.2:8080/' }} // Change to your webserver.\n                    allowFileAccess={true}\n                    cacheEnabled={false}\n                    ref={(webView) => this.webView = webView} // Set ref.\n                    onMessage={this.onMessage} // Listens for messages.\n                />\n                {this.state.sum && \n                <Text>The sum is {this.state.sum}</Text>}\n            </View>\n        )\n    }\n}","position":{"start":{"line":75,"column":1,"offset":3168},"end":{"line":131,"column":4,"offset":5267},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This component gives a way to call the Rust function ","position":{"start":{"line":133,"column":1,"offset":5269},"end":{"line":133,"column":54,"offset":5322},"indent":[]}},{"type":"inlineCode","value":"add","position":{"start":{"line":133,"column":54,"offset":5322},"end":{"line":133,"column":59,"offset":5327},"indent":[]}},{"type":"text","value":" from React Native, through WebAssembly.","position":{"start":{"line":133,"column":59,"offset":5327},"end":{"line":133,"column":99,"offset":5367},"indent":[]}}],"position":{"start":{"line":133,"column":1,"offset":5269},"end":{"line":133,"column":99,"offset":5367},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Conclusion","position":{"start":{"line":135,"column":4,"offset":5372},"end":{"line":135,"column":14,"offset":5382},"indent":[]}}],"position":{"start":{"line":135,"column":1,"offset":5369},"end":{"line":135,"column":14,"offset":5382},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Although this solution may seem a bit hacky, I found that it works well for my needs and gives me the least complexity to use the speed and safety of Rust and WebAssembly in my React Native projects. ","position":{"start":{"line":136,"column":1,"offset":5383},"end":{"line":136,"column":201,"offset":5583},"indent":[]}}],"position":{"start":{"line":136,"column":1,"offset":5383},"end":{"line":136,"column":201,"offset":5583},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If you find a problem in the code or a better way to achieve this, don't hesitate to create an issue on the ","position":{"start":{"line":138,"column":1,"offset":5585},"end":{"line":138,"column":109,"offset":5693},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/wborgeaud/rust-wasm-react-native","children":[{"type":"text","value":"repository","position":{"start":{"line":138,"column":110,"offset":5694},"end":{"line":138,"column":120,"offset":5704},"indent":[]}}],"position":{"start":{"line":138,"column":109,"offset":5693},"end":{"line":138,"column":174,"offset":5758},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":138,"column":174,"offset":5758},"end":{"line":138,"column":175,"offset":5759},"indent":[]}}],"position":{"start":{"line":138,"column":1,"offset":5585},"end":{"line":138,"column":175,"offset":5759},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Use Rust in React Native through WebAssembly\",\"date\":\"2019-11-14T00:00:00.000Z\"}","position":{"start":{"line":141,"column":1,"offset":5762},"end":{"line":141,"column":119,"offset":5880},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":141,"column":119,"offset":5880}}},"scopeImports":["import React from 'react'"],"scopeIdentifiers":["React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Use Rust in React Native through WebAssembly\",\n  \"date\": \"2019-11-14T00:00:00.000Z\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"This post shows how to use Rust functions in a React Native project through WebAssembly. I struggled quite a bit to find an easy way to make it work, so I thought I\\u2019d share my findings. You can find the code for this post \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/wborgeaud/rust-wasm-react-native\"\n  }), \"here\"), \".\"), mdx(\"p\", null, \"Here\\u2019s the TLDR:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Create a \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"wasm-pack\"), \" project exposing the Rust functions you want to export. \"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Serve a web page exposing these functions through \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"message\"), \" events.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Use a React Native \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"WebView\"), \" of this web page.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Call Rust functions by sending messages to the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"WebView\"), \". \")), mdx(\"h2\", {\n    \"id\": \"pros-and-cons\"\n  }, \"Pros and Cons\"), mdx(\"h3\", {\n    \"id\": \"pros\"\n  }, \"Pros\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"One alternative is to use native modules but it is a pain to setup with Rust and React Native, and requires lots of different configurations for Android and iOS.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Another alternative is to serve \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"wasm\"), \"  files locally on the app and use them in a \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"WebView\"), \".  This is also a pain to setup since local files need to be put in different places in Android and iOS, and you will get a bunch of permission errors along the way.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The solution shown here is very easy to setup, works out of the box, and allows for a clear separation between the Rust and React Native development.\")), mdx(\"h3\", {\n    \"id\": \"cons\"\n  }, \"Cons\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The device needs an Internet connection to download the web page.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Mild privacy issue since one can track requests to the web server. But all computations using WebAssembly are done locally on the device. In particular, the parameters to the Rust functions will not be sent to the server.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Probably quite slower than using the native modules.\")), mdx(\"h2\", {\n    \"id\": \"prototype\"\n  }, \"Prototype\"), mdx(\"p\", null, \"This gives an example of this structure with a simple Rust function that adds two numbers.\"), mdx(\"h3\", {\n    \"id\": \"rust\"\n  }, \"Rust\"), mdx(\"p\", null, \"Create a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"wasm-pack\"), \" project following the instructions given \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://rustwasm.github.io/docs/book/game-of-life/hello-world.html\"\n  }), \"here\"), \". The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/lib.rs\"), \" exposes the functions you want to export. Here\\u2019s ours:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-rust\"\n  }), \"use wasm_bindgen::prelude::*;\\n\\n#[wasm_bindgen]\\npub fn add(a: u32, b: u32) -> u32 {\\n    a + b\\n}\\n\")), mdx(\"p\", null, \"Then, build the package with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"wasm-pack build\"), \" and create a web directory with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"package.json\"), \" like:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"/* -------- SNIP -------- */\\n\\\"devDependencies\\\": {\\n    \\\"rust\\\": \\\"file:../pkg\\\",\\n    \\\"webpack\\\": \\\"^4.29.3\\\",\\n    \\\"webpack-cli\\\": \\\"^3.1.0\\\",\\n    \\\"webpack-dev-server\\\": \\\"^3.1.5\\\",\\n    \\\"copy-webpack-plugin\\\": \\\"^5.0.0\\\"\\n  }\\n/* -------- SNIP -------- */\\n\")), mdx(\"p\", null, \"The WebAssembly functions can be called from Javascript using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"message\"), \" events. Here\\u2019s our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"index.js\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"import * as wasm from \\\"rust\\\"; // Import the wasm package\\n\\nlet sum;\\ndocument.addEventListener(\\\"message\\\", function(event) { // Receive parameters in a message\\n    let {a: s1, b: s2} = JSON.parse(event.data); // Parse the parameters\\n    sum = wasm.add(s1, s2); // Call the wasm function\\n    window.ReactNativeWebView.postMessage(JSON.stringify({sum})); // Send a message to React Native with the result of the wasm function.\\n}, false);\\n\")), mdx(\"p\", null, \"Now, serve this web directory on a web server. For this prototype, we serve it on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"localhost:8080\"), \".\"), mdx(\"h3\", {\n    \"id\": \"react-native\"\n  }, \"React Native\"), mdx(\"p\", null, \"Create a React Native project with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"react-native-webview\"), \" linked. Here is our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"App.js\"), \" that shows the basic way to call the WebAssembly functions served by our web server:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"import React, { Component } from 'react';\\nimport { View, Button, TextInput, Text } from 'react-native';\\nimport { WebView } from 'react-native-webview';\\n\\n\\n\\nexport default class App extends Component {\\n\\n    webView = null; // Holds the reference to the WebView\\n    state = { s1: null, s2: null, sum: null };\\n    \\n    // Sends a message to the WebView with the parameters of the Rust function `add`.\\n    sendMessage = () => {\\n        this.webView.postMessage(JSON.stringify({ a: parseInt(this.state.s1), b: parseInt(this.state.s2) }));\\n    }\\n    \\n    // Listen for messages from the WebView containing the result of the wasm function.\\n    onMessage = (event) => {\\n        this.setState({sum: JSON.parse(event.nativeEvent.data).sum}, () => console.log(this.state));\\n    }\\n    \\n    render() {\\n        return (\\n            <View style={{ flex: 1 }}>\\n                <Button\\n                    title=\\\"Press me\\\"\\n                    onPress={this.sendMessage} // Sends a message on button press.\\n                />\\n                <TextInput\\n                    placeholder=\\\"First summand\\\"\\n                    onChangeText={(text) => this.setState({ s1: text })}\\n                    value={this.state.s1}\\n                />\\n                <TextInput\\n                    placeholder=\\\"Second summand\\\"\\n                    onChangeText={(text) => this.setState({ s2: text })}\\n                    value={this.state.s2}\\n                />\\n                <WebView\\n                    style={{ height: 0 }}\\n                    useWebkit={true}\\n                    originWhitelist={['*']}\\n                    javaScriptEnabled={true}\\n                    source={{ uri: 'http://10.0.2.2:8080/' }} // Change to your webserver.\\n                    allowFileAccess={true}\\n                    cacheEnabled={false}\\n                    ref={(webView) => this.webView = webView} // Set ref.\\n                    onMessage={this.onMessage} // Listens for messages.\\n                />\\n                {this.state.sum && \\n                <Text>The sum is {this.state.sum}</Text>}\\n            </View>\\n        )\\n    }\\n}\\n\")), mdx(\"p\", null, \"This component gives a way to call the Rust function \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"add\"), \" from React Native, through WebAssembly.\"), mdx(\"h2\", {\n    \"id\": \"conclusion\"\n  }, \"Conclusion\"), mdx(\"p\", null, \"Although this solution may seem a bit hacky, I found that it works well for my needs and gives me the least complexity to use the speed and safety of Rust and WebAssembly in my React Native projects. \"), mdx(\"p\", null, \"If you find a problem in the code or a better way to achieve this, don\\u2019t hesitate to create an issue on the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/wborgeaud/rust-wasm-react-native\"\n  }), \"repository\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Use Rust in React Native through WebAssembly\",\n  \"date\": \"2019-11-14T00:00:00.000Z\"\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`This post shows how to use Rust functions in a React Native project through WebAssembly. I struggled quite a bit to find an easy way to make it work, so I thought I’d share my findings. You can find the code for this post `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/wborgeaud/rust-wasm-react-native\"\n      }}>{`here`}</a>{`.`}</p>\n    <p>{`Here’s the TLDR:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Create a `}<inlineCode parentName=\"li\">{`wasm-pack`}</inlineCode>{` project exposing the Rust functions you want to export. `}</li>\n      <li parentName=\"ol\">{`Serve a web page exposing these functions through `}<inlineCode parentName=\"li\">{`message`}</inlineCode>{` events.`}</li>\n      <li parentName=\"ol\">{`Use a React Native `}<inlineCode parentName=\"li\">{`WebView`}</inlineCode>{` of this web page.`}</li>\n      <li parentName=\"ol\">{`Call Rust functions by sending messages to the `}<inlineCode parentName=\"li\">{`WebView`}</inlineCode>{`. `}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"pros-and-cons\"\n    }}>{`Pros and Cons`}</h2>\n    <h3 {...{\n      \"id\": \"pros\"\n    }}>{`Pros`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`One alternative is to use native modules but it is a pain to setup with Rust and React Native, and requires lots of different configurations for Android and iOS.`}</li>\n      <li parentName=\"ul\">{`Another alternative is to serve `}<inlineCode parentName=\"li\">{`wasm`}</inlineCode>{`  files locally on the app and use them in a `}<inlineCode parentName=\"li\">{`WebView`}</inlineCode>{`.  This is also a pain to setup since local files need to be put in different places in Android and iOS, and you will get a bunch of permission errors along the way.`}</li>\n      <li parentName=\"ul\">{`The solution shown here is very easy to setup, works out of the box, and allows for a clear separation between the Rust and React Native development.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"cons\"\n    }}>{`Cons`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`The device needs an Internet connection to download the web page.`}</li>\n      <li parentName=\"ul\">{`Mild privacy issue since one can track requests to the web server. But all computations using WebAssembly are done locally on the device. In particular, the parameters to the Rust functions will not be sent to the server.`}</li>\n      <li parentName=\"ul\">{`Probably quite slower than using the native modules.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"prototype\"\n    }}>{`Prototype`}</h2>\n    <p>{`This gives an example of this structure with a simple Rust function that adds two numbers.`}</p>\n    <h3 {...{\n      \"id\": \"rust\"\n    }}>{`Rust`}</h3>\n    <p>{`Create a `}<inlineCode parentName=\"p\">{`wasm-pack`}</inlineCode>{` project following the instructions given `}<a parentName=\"p\" {...{\n        \"href\": \"https://rustwasm.github.io/docs/book/game-of-life/hello-world.html\"\n      }}>{`here`}</a>{`. The `}<inlineCode parentName=\"p\">{`src/lib.rs`}</inlineCode>{` exposes the functions you want to export. Here’s ours:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rust\"\n      }}>{`use wasm_bindgen::prelude::*;\n\n#[wasm_bindgen]\npub fn add(a: u32, b: u32) -> u32 {\n    a + b\n}\n`}</code></pre>\n    <p>{`Then, build the package with `}<inlineCode parentName=\"p\">{`wasm-pack build`}</inlineCode>{` and create a web directory with `}<inlineCode parentName=\"p\">{`package.json`}</inlineCode>{` like:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`/* -------- SNIP -------- */\n\"devDependencies\": {\n    \"rust\": \"file:../pkg\",\n    \"webpack\": \"^4.29.3\",\n    \"webpack-cli\": \"^3.1.0\",\n    \"webpack-dev-server\": \"^3.1.5\",\n    \"copy-webpack-plugin\": \"^5.0.0\"\n  }\n/* -------- SNIP -------- */\n`}</code></pre>\n    <p>{`The WebAssembly functions can be called from Javascript using `}<inlineCode parentName=\"p\">{`message`}</inlineCode>{` events. Here’s our `}<inlineCode parentName=\"p\">{`index.js`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import * as wasm from \"rust\"; // Import the wasm package\n\nlet sum;\ndocument.addEventListener(\"message\", function(event) { // Receive parameters in a message\n    let {a: s1, b: s2} = JSON.parse(event.data); // Parse the parameters\n    sum = wasm.add(s1, s2); // Call the wasm function\n    window.ReactNativeWebView.postMessage(JSON.stringify({sum})); // Send a message to React Native with the result of the wasm function.\n}, false);\n`}</code></pre>\n    <p>{`Now, serve this web directory on a web server. For this prototype, we serve it on `}<inlineCode parentName=\"p\">{`localhost:8080`}</inlineCode>{`.`}</p>\n    <h3 {...{\n      \"id\": \"react-native\"\n    }}>{`React Native`}</h3>\n    <p>{`Create a React Native project with `}<inlineCode parentName=\"p\">{`react-native-webview`}</inlineCode>{` linked. Here is our `}<inlineCode parentName=\"p\">{`App.js`}</inlineCode>{` that shows the basic way to call the WebAssembly functions served by our web server:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import React, { Component } from 'react';\nimport { View, Button, TextInput, Text } from 'react-native';\nimport { WebView } from 'react-native-webview';\n\n\n\nexport default class App extends Component {\n\n    webView = null; // Holds the reference to the WebView\n    state = { s1: null, s2: null, sum: null };\n    \n    // Sends a message to the WebView with the parameters of the Rust function \\`add\\`.\n    sendMessage = () => {\n        this.webView.postMessage(JSON.stringify({ a: parseInt(this.state.s1), b: parseInt(this.state.s2) }));\n    }\n    \n    // Listen for messages from the WebView containing the result of the wasm function.\n    onMessage = (event) => {\n        this.setState({sum: JSON.parse(event.nativeEvent.data).sum}, () => console.log(this.state));\n    }\n    \n    render() {\n        return (\n            <View style={{ flex: 1 }}>\n                <Button\n                    title=\"Press me\"\n                    onPress={this.sendMessage} // Sends a message on button press.\n                />\n                <TextInput\n                    placeholder=\"First summand\"\n                    onChangeText={(text) => this.setState({ s1: text })}\n                    value={this.state.s1}\n                />\n                <TextInput\n                    placeholder=\"Second summand\"\n                    onChangeText={(text) => this.setState({ s2: text })}\n                    value={this.state.s2}\n                />\n                <WebView\n                    style={{ height: 0 }}\n                    useWebkit={true}\n                    originWhitelist={['*']}\n                    javaScriptEnabled={true}\n                    source={{ uri: 'http://10.0.2.2:8080/' }} // Change to your webserver.\n                    allowFileAccess={true}\n                    cacheEnabled={false}\n                    ref={(webView) => this.webView = webView} // Set ref.\n                    onMessage={this.onMessage} // Listens for messages.\n                />\n                {this.state.sum && \n                <Text>The sum is {this.state.sum}</Text>}\n            </View>\n        )\n    }\n}\n`}</code></pre>\n    <p>{`This component gives a way to call the Rust function `}<inlineCode parentName=\"p\">{`add`}</inlineCode>{` from React Native, through WebAssembly.`}</p>\n    <h2 {...{\n      \"id\": \"conclusion\"\n    }}>{`Conclusion`}</h2>\n    <p>{`Although this solution may seem a bit hacky, I found that it works well for my needs and gives me the least complexity to use the speed and safety of Rust and WebAssembly in my React Native projects. `}</p>\n    <p>{`If you find a problem in the code or a better way to achieve this, don’t hesitate to create an issue on the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/wborgeaud/rust-wasm-react-native\"\n      }}>{`repository`}</a>{`.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}